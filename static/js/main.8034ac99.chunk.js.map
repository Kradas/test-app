{"version":3,"sources":["components/StarIcons/style.module.scss","store/reducers/main.js","store/actions/types.js","store/reducers/index.js","store/index.js","store/reducers/selectors.js","components/FormTextField/index.js","components/StarIcons/index.js","components/Dashboard/index.js","containers/DashboardContainer/index.js","store/actions/index.js","components/HotelInfo/index.js","containers/HotelInfoContainer/index.js","App.js","serviceWorker.js","index.js","components/Dashboard/style.module.scss","components/HotelInfo/style.module.scss"],"names":["module","exports","star","starsContainer","initialState","hotels","bookInfo","isSnackbarShown","handleActions","_handleActions","Object","defineProperty","state","_ref","payload","objectSpread","rootReducer","combineReducers","form","main","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","selectHotels","values","selectCurrentHotelInfo","hotelId","selectSnackbar","createDeepEqualSelector","createSelectorCreator","defaultMemoize","isEqual","selectRandomHotels","sampleSize","selectSearchResults","getFormValues","search","arguments","length","undefined","filter","_ref2","city","name","toLocaleLowerCase","includes","FormTextField","label","input","_ref$meta","meta","touched","invalid","error","custom","objectWithoutProperties","react_default","a","createElement","TextField","assign","placeholder","helperText","StarIcons","_ref$stars","stars","icons","i","push","Icon","className","classes","key","Dashboard","_this$props","this","props","bestOffers","searchResult","root","GridList","cellHeight","gridList","cols","GridListTile","style","height","ListSubheader","component","listHeader","Field","textField","margin","title","map","hotel","id","rows","src","image","alt","GridListTileBar","hotelBar","components_StarIcons","actionIcon","react_router_dom","to","concat","IconButton","aria-label","icon","Info_default","subtitle","React","Component","reduxForm","connect","handleBookHotelSubmit","createAction","handleHideSnackbar","HotelInfo","initialize","currentHotelInfo","container","Card","card","CardMedia","CardContent","Typography","gutterBottom","variant","hotelName","color","description","CardActions","onSubmit","handleSubmit","dateFields","type","InputLabelProps","shrink","Button","Snackbar","anchorOrigin","vertical","horizontal","open","showSnackbar","autoHideDuration","onClose","handleCloseSnackbar","SnackbarContent","snackbar","aria-describedby","message","match","params","dispatch","App","es","react_router","exact","path","DashboardContainer","HotelInfoContainer","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","tile","media"],"mappings":"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","file":"static/js/main.8034ac99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"star\":\"style_star__1kzHf\",\"starsContainer\":\"style_starsContainer__MOUny\"};","import { handleActions } from 'redux-actions';\nimport * as types from '../actions/types';\nimport jsonData from './data';\n\nconst initialState = {\n  hotels: jsonData,\n  bookInfo: null,\n  isSnackbarShown: false,\n};\n\nexport default handleActions(\n  {\n    [types.BOOK_HOTEL_SUBMIT](state, { payload }) {\n      return {\n        ...state,\n        bookInfo: payload,\n        isSnackbarShown: true,\n      };\n    },\n    [types.HIDE_SNACKBAR](state) {\n      return {\n        ...state,\n        isSnackbarShown: false,\n      };\n    },\n  },\n  initialState,\n);\n","export const BOOK_HOTEL_SUBMIT = 'BOOK_HOTEL_SUBMIT';\nexport const HIDE_SNACKBAR = 'CLOSE_SNACKBAR';\n","import { combineReducers } from 'redux';\nimport { reducer as form } from 'redux-form';\nimport main from './main';\n\nconst rootReducer = combineReducers({\n  form,\n  main,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport isEqual from 'lodash/isEqual';\nimport sampleSize from 'lodash/sampleSize';\nimport { getFormValues } from 'redux-form';\n\nexport const selectHotels = state => Object.values(state.main.hotels);\nexport const selectFormSearch = state => getFormValues('dashboardSearch')(state);\nexport const selectCurrentHotelInfo = (state, hotelId) => state.main.hotels[hotelId];\nexport const selectSnackbar = state => state.main.isSnackbarShown;\n\nconst createDeepEqualSelector = createSelectorCreator(defaultMemoize, isEqual);\n\nexport const selectRandomHotels = createDeepEqualSelector(selectHotels, hotels => {\n  return sampleSize(hotels, 5);\n});\n\nexport const selectSearchResults = createDeepEqualSelector(\n  selectHotels,\n  selectFormSearch,\n  (hotels, { search } = { search: '' }) => {\n    return search\n      ? hotels.filter(({ city, name }) => {\n          return (\n            city.toLocaleLowerCase().includes(search.toLocaleLowerCase()) ||\n            name.toLocaleLowerCase().includes(search.toLocaleLowerCase())\n          );\n        })\n      : undefined;\n  },\n);\n","import React from 'react';\nimport { TextField } from '@material-ui/core';\n\nconst FormTextField = ({ label, input, meta: { touched, invalid, error }, ...custom }) => (\n  <TextField\n    label={label}\n    placeholder={label}\n    error={touched && invalid}\n    helperText={touched && error}\n    {...input}\n    {...custom}\n  />\n);\n\nexport default FormTextField;\n","import React from 'react';\nimport Icon from '@material-ui/core/Icon';\nimport classes from './style.module.scss';\n\nfunction StarIcons({ stars = 1 }) {\n  let icons = [];\n  for (let i = 0; i < stars; i++) {\n    icons.push(\n      <Icon className={classes.star} key={i}>\n        star\n      </Icon>,\n    );\n  }\n  return <div className={classes.starsContainer}>{icons}</div>;\n}\n\nexport default StarIcons;\n","import React from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport FormTextField from '../FormTextField';\nimport { Link } from 'react-router-dom';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport StarIcons from '../StarIcons';\n\nimport classes from './style.module.scss';\n\nclass Dashboard extends React.Component {\n  render() {\n    const { bestOffers, searchResult } = this.props;\n    return (\n      <form className={classes.root}>\n        <GridList cellHeight={150} className={classes.gridList} cols={2}>\n          <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n            <ListSubheader component=\"div\" className={classes.listHeader}>\n              <Field\n                name=\"search\"\n                component={FormTextField}\n                label=\"Search\"\n                className={classes.textField}\n                margin=\"normal\"\n              />\n            </ListSubheader>\n          </GridListTile>\n          <GridListTile key=\"listTitle\" cols={2} style={{ height: 'auto' }}>\n            <ListSubheader component=\"div\" className={classes.title}>\n              {!searchResult ? 'Best offers:' : 'Search result:'}\n            </ListSubheader>\n          </GridListTile>\n          {(searchResult ? searchResult : bestOffers).map(hotel => (\n            <GridListTile key={hotel.id} cols={1} rows={4}>\n              <img src={hotel.image} alt={hotel.name} />\n              <GridListTileBar\n                title={\n                  <div className={classes.hotelBar}>\n                    <span>{hotel.name}</span>\n                    <StarIcons stars={hotel.stars} />\n                  </div>\n                }\n                actionIcon={\n                  <Link to={`/hotel/${hotel.id}`}>\n                    <IconButton aria-label={`info about ${hotel.name}`} className={classes.icon}>\n                      <InfoIcon />\n                    </IconButton>\n                  </Link>\n                }\n                subtitle={<span>{hotel.city}</span>}\n              />\n            </GridListTile>\n          ))}\n        </GridList>\n      </form>\n    );\n  }\n}\n\nexport default reduxForm({\n  form: 'dashboardSearch',\n})(Dashboard);\n","import { connect } from 'react-redux';\nimport { selectRandomHotels, selectSearchResults } from '../../store/reducers/selectors';\nimport Dashboard from '../../components/Dashboard';\n\nfunction mapStateToProps(state) {\n  return {\n    bestOffers: selectRandomHotels(state),\n    searchResult: selectSearchResults(state),\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n","import { createAction } from 'redux-actions';\nimport * as types from './types';\n\nexport const handleBookHotelSubmit = createAction(types.BOOK_HOTEL_SUBMIT);\nexport const handleHideSnackbar = createAction(types.HIDE_SNACKBAR);\n","import React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport StarIcons from '../StarIcons';\nimport FormTextField from '../FormTextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\n\nimport classes from './style.module.scss';\n\nclass HotelInfo extends Component {\n  componentDidMount() {\n    this.props.initialize({\n      hotel: this.props.currentHotelInfo.name,\n    });\n  }\n\n  render() {\n    const { currentHotelInfo } = this.props;\n    return (\n      <div className={classes.container}>\n        <Card className={classes.card}>\n          <CardMedia component=\"img\" alt=\"Contemplative Reptile\" image={currentHotelInfo.image} height={600} />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\" className={classes.hotelName}>\n              {currentHotelInfo.name}\n              <StarIcons stars={currentHotelInfo.stars} />\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {currentHotelInfo.description}\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <form className={classes.form} onSubmit={this.props.handleSubmit}>\n              <div className={classes.dateFields}>\n                <Field\n                  name=\"dateFrom\"\n                  component={FormTextField}\n                  type=\"date\"\n                  label=\"from\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n                <Field\n                  name=\"dateTo\"\n                  component={FormTextField}\n                  type=\"date\"\n                  label=\"to\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </div>\n              <Button type=\"submit\" color=\"primary\">\n                Book\n              </Button>\n            </form>\n          </CardActions>\n        </Card>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n          open={this.props.showSnackbar}\n          autoHideDuration={2000}\n          onClose={this.props.handleCloseSnackbar}\n        >\n          <SnackbarContent\n            className={classes.snackbar}\n            aria-describedby=\"client-snackbar\"\n            message=\"Successfully booked\"\n          />\n        </Snackbar>\n      </div>\n    );\n  }\n}\n\nexport default reduxForm({\n  form: 'bookForm',\n})(HotelInfo);\n","import { connect } from 'react-redux';\nimport { handleBookHotelSubmit, handleHideSnackbar } from '../../store/actions';\nimport { selectCurrentHotelInfo, selectSnackbar } from '../../store/reducers/selectors';\nimport HotelInfo from '../../components/HotelInfo';\n\nfunction mapStateToProps(state, props) {\n  return {\n    currentHotelInfo: selectCurrentHotelInfo(state, props.match.params.hotelId),\n    showSnackbar: selectSnackbar(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSubmit: values => dispatch(handleBookHotelSubmit(values)),\n    handleCloseSnackbar: () => dispatch(handleHideSnackbar()),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(HotelInfo);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.scss';\nimport DashboardContainer from './containers/DashboardContainer';\nimport HotelInfoContainer from './containers/HotelInfoContainer';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Route exact path=\"/\" component={DashboardContainer} />\n        <Route path=\"/hotel/:hotelId\" component={HotelInfoContainer} />\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__aALIg\",\"gridList\":\"style_gridList__39lWZ\",\"textField\":\"style_textField__3PbQp\",\"listHeader\":\"style_listHeader__2MqX2\",\"title\":\"style_title__1WHlq\",\"icon\":\"style_icon__2yVQk\",\"hotelBar\":\"style_hotelBar__5ZNIF\",\"tile\":\"style_tile__V_yGR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3lbdB\",\"card\":\"style_card__2L4xn\",\"media\":\"style_media__2lOjZ\",\"hotelName\":\"style_hotelName__2PWQ9\",\"form\":\"style_form__2QvGk\",\"dateFields\":\"style_dateFields__qzYmF\",\"snackbar\":\"style_snackbar__2aw1q\"};"],"sourceRoot":""}